<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="D:\WORK\GITHUB\TestTaskCalculator\TestTaskCalc\ushoza.calc\TestProject\bin\Debug\TestProjectForFeatureVertInt.exe" total="62" errors="0" failures="4" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2020-01-24" time="13:42:44">
  <environment nunit-version="2.5.10.11092" clr-version="4.0.30319.42000" os-version="Microsoft Windows NT 6.2.9200.0" platform="Win32NT" cwd="D:\WORK\GITHUB\TestTaskCalculator\TestTaskCalc\ushoza.calc\TestProject\bin\Debug" machine-name="PYATAK" user="pyatak" user-domain="ASCON-CHEL" />
  <culture-info current-culture="ru-RU" current-uiculture="ru-RU" />
  <test-suite type="Assembly" name="D:\WORK\GITHUB\TestTaskCalculator\TestTaskCalc\ushoza.calc\TestProject\bin\Debug\TestProjectForFeatureVertInt.exe" executed="True" result="Failure" success="False" time="54.120" asserts="0">
    <results>
      <test-suite type="Namespace" name="TestProjectForFeatureVertInt" executed="True" result="Inconclusive" success="False" time="0.019" asserts="0">
        <results>
          <test-suite type="TestFixture" name="TestNegativeNumbers" executed="True" result="Inconclusive" success="False" time="0.010" asserts="0" />
          <test-suite type="TestFixture" name="TestValidation" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
        </results>
      </test-suite>
      <test-suite type="Namespace" name="ushoza" executed="True" result="Failure" success="False" time="54.090" asserts="0">
        <results>
          <test-suite type="Namespace" name="calc" executed="True" result="Failure" success="False" time="54.090" asserts="0">
            <results>
              <test-suite type="Namespace" name="test" executed="True" result="Failure" success="False" time="54.090" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="TestAlu" executed="True" result="Success" success="True" time="28.152" asserts="0">
                    <results>
                      <test-case name="ushoza.calc.test.TestAlu.TestCalcComplexExpression" executed="True" result="Success" success="True" time="0.067" asserts="1" />
                      <test-case name="ushoza.calc.test.TestAlu.TestCalcExpressionWithExpMustbe1and5" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="ushoza.calc.test.TestAlu.TestCalcSimpleWithBreakets" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="ushoza.calc.test.TestAlu.TestCalcSimpleWithBreakets2" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="ushoza.calc.test.TestAlu.TestCalSimpleExpression" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="ushoza.calc.test.TestAlu.TestCalSimpleExpressionDecimal" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="ushoza.calc.test.TestAlu.TestPolishNotation2plus3Mult8" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                      <test-case name="ushoza.calc.test.TestAlu.TestPolishNotationSimple2Plus3Mult90Minus1" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="ushoza.calc.test.TestAlu.TestPolishNotationWithBreakets" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="ushoza.calc.test.TestAlu.TestPolishNotationWithBreaketsBrecketsInTheMiddle" executed="True" result="Success" success="True" time="28.026" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TestMathParser" executed="True" result="Failure" success="False" time="13.063" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="HasExpressionShouldBeTokenList" executed="True" result="Success" success="True" time="0.028" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestMathParser.HasExpressionShouldBeTokenList(&quot;2+3&quot;,&quot;2&quot;,&quot;+&quot;,&quot;3&quot;)" executed="True" result="Success" success="True" time="0.026" asserts="2" />
                          <test-case name="ushoza.calc.test.TestMathParser.HasExpressionShouldBeTokenList(&quot; 3 + 2 &quot;,&quot; 3 &quot;,&quot;+&quot;,&quot; 2 &quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="HasExpressionShouldBeTokenListWithBrackets" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestMathParser.HasExpressionShouldBeTokenListWithBrackets(&quot;(1+2)*4+3&quot;,&quot;(&quot;,&quot;1&quot;,&quot;+&quot;,&quot;2&quot;,&quot;)&quot;,&quot;*&quot;,&quot;4&quot;,&quot;+&quot;,&quot;3&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="HasExpressionShouldBeTokenListWithBrackets" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestMathParser.HasExpressionShouldBeTokenListWithBrackets(&quot;((2+3)*2-5)&quot;,&quot;(&quot;,&quot;(&quot;,&quot;2&quot;,&quot;+&quot;,&quot;3&quot;,&quot;)&quot;,&quot;*&quot;,&quot;2&quot;,&quot;-&quot;,&quot;5&quot;,&quot;)&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                        </results>
                      </test-suite>
                      <test-case name="ushoza.calc.test.TestMathParser.MustBeReturnList2and1step3" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-suite type="ParameterizedTest" name="MustBeReturnList2step3" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestMathParser.MustBeReturnList2step3(&quot;2^3&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="MustBeReturnList6dev2exp2" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestMathParser.MustBeReturnList6dev2exp2(&quot;6/2^2&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="MustBeReturnListTwoFreePlusFourMinusTwo" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestMathParser.MustBeReturnListTwoFreePlusFourMinusTwo(&quot;2^3+4-2&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="MustBeReturnListTwoFreePlusFourMinusTwoWithBrackets" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestMathParser.MustBeReturnListTwoFreePlusFourMinusTwoWithBrackets(&quot;2^(3+4-2)&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="MustBeReturnRoof" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestMathParser.MustBeReturnRoof(&quot;^&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ShouldBeBadSyntaxisException" executed="True" result="Success" success="True" time="5.350" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeBadSyntaxisException(&quot;2/&quot;)" executed="True" result="Success" success="True" time="2.082" asserts="2" />
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeBadSyntaxisException(&quot;2++3&quot;)" executed="True" result="Success" success="True" time="0.666" asserts="2" />
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeBadSyntaxisException(&quot;2 - / 4&quot;)" executed="True" result="Success" success="True" time="0.810" asserts="2" />
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeBadSyntaxisException(&quot;2a / 4&quot;)" executed="True" result="Success" success="True" time="0.894" asserts="2" />
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeBadSyntaxisException(&quot;2+3(4-5)&quot;)" executed="True" result="Success" success="True" time="0.893" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ShouldBeOperand" executed="True" result="Success" success="True" time="0.004" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeOperand(&quot;7&quot;)" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeOperand(&quot;23&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeOperand(&quot;10&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeOperand(&quot; 45&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="ShouldBeOperation" executed="True" result="Success" success="True" time="0.002" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeOperation(&quot;+&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeOperation(&quot;-&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeOperation(&quot;*&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="ushoza.calc.test.TestMathParser.ShouldBeOperation(&quot;/&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-case name="ushoza.calc.test.TestMathParser.TestParser.HasExpressionShouldBeTokenListWithBracketsWithDecimal" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="ushoza.calc.test.TestMathParser.TestParser.ShouldBeEqual" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="ushoza.calc.test.TestMathParser.TestParser.ShouldBeOperandWitDecPlaces" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="ushoza.calc.test.TestMathParser.TestParser.ShouldBeOperandWitDecPlaces_WithWiteSpece" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="ushoza.calc.test.TestMathParser.TestParser.ShouldBeTokenListWithNegativeNumbersAndBrackets" executed="True" result="Failure" success="False" time="0.895" asserts="1">
                        <failure>
                          <message><![CDATA[  Expected is <System.Collections.Generic.List`1[ushoza.calc.Token]> with 11 elements, actual is <System.Collections.Generic.List`1[ushoza.calc.Token]> with 13 elements
  Values differ at index [0]
  Expected: <ushoza.calc.TokenOperand>
  But was:  <ushoza.calc.DefaultTokenOperation>
]]></message>
                          <stack-trace><![CDATA[в ushoza.calc.test.TestParser.ShouldBeTokenListWithNegativeNumbersAndBrackets() в D:\WORK\GITHUB\TestTaskCalculator\TestTaskCalc\ushoza.calc\TestProject\TestParser.cs:строка 207
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="ushoza.calc.test.TestMathParser.TestParser.ShouldBeTokenListWithNegativeNumbersSimple" executed="True" result="Failure" success="False" time="6.737" asserts="1">
                        <failure>
                          <message><![CDATA[  Expected is <System.Collections.Generic.List`1[ushoza.calc.Token]> with 5 elements, actual is <System.Collections.Generic.List`1[ushoza.calc.Token]> with 6 elements
  Values differ at index [0]
  Expected: <ushoza.calc.TokenOperand>
  But was:  <ushoza.calc.DefaultTokenOperation>
]]></message>
                          <stack-trace><![CDATA[в ushoza.calc.test.TestParser.ShouldBeTokenListWithNegativeNumbersSimple() в D:\WORK\GITHUB\TestTaskCalculator\TestTaskCalc\ushoza.calc\TestProject\TestParser.cs:строка 187
]]></stack-trace>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="TestParser" executed="True" result="Failure" success="False" time="12.867" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="HasExpressionShouldBeTokenList" executed="True" result="Success" success="True" time="0.001" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestParser.HasExpressionShouldBeTokenList(&quot;2+3&quot;,&quot;2&quot;,&quot;+&quot;,&quot;3&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="ushoza.calc.test.TestParser.HasExpressionShouldBeTokenList(&quot; 3 + 2 &quot;,&quot; 3 &quot;,&quot;+&quot;,&quot; 2 &quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="HasExpressionShouldBeTokenListWithBrackets" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestParser.HasExpressionShouldBeTokenListWithBrackets(&quot;((2+3)*2-5)&quot;,&quot;(&quot;,&quot;(&quot;,&quot;2&quot;,&quot;+&quot;,&quot;3&quot;,&quot;)&quot;,&quot;*&quot;,&quot;2&quot;,&quot;-&quot;,&quot;5&quot;,&quot;)&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="HasExpressionShouldBeTokenListWithBrackets" executed="True" result="Success" success="True" time="0.000" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestParser.HasExpressionShouldBeTokenListWithBrackets(&quot;(1+2)*4+3&quot;,&quot;(&quot;,&quot;1&quot;,&quot;+&quot;,&quot;2&quot;,&quot;)&quot;,&quot;*&quot;,&quot;4&quot;,&quot;+&quot;,&quot;3&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-case name="ushoza.calc.test.TestParser.HasExpressionShouldBeTokenListWithBracketsWithDecimal" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-suite type="ParameterizedTest" name="ShouldBeBadSyntaxisException" executed="True" result="Success" success="True" time="7.438" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeBadSyntaxisException(&quot;2/&quot;)" executed="True" result="Success" success="True" time="1.605" asserts="2" />
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeBadSyntaxisException(&quot;2++3&quot;)" executed="True" result="Success" success="True" time="0.989" asserts="2" />
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeBadSyntaxisException(&quot;2 - / 4&quot;)" executed="True" result="Success" success="True" time="1.206" asserts="2" />
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeBadSyntaxisException(&quot;2a / 4&quot;)" executed="True" result="Success" success="True" time="1.611" asserts="2" />
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeBadSyntaxisException(&quot;2+3(4-5)&quot;)" executed="True" result="Success" success="True" time="2.025" asserts="2" />
                        </results>
                      </test-suite>
                      <test-case name="ushoza.calc.test.TestParser.ShouldBeEqual" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="ShouldBeOperand" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeOperand(&quot;7&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeOperand(&quot;23&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeOperand(&quot;10&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeOperand(&quot; 45&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-case name="ushoza.calc.test.TestParser.ShouldBeOperandWitDecPlaces" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="ushoza.calc.test.TestParser.ShouldBeOperandWitDecPlaces_WithWiteSpece" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-suite type="ParameterizedTest" name="ShouldBeOperation" executed="True" result="Success" success="True" time="0.003" asserts="0">
                        <results>
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeOperation(&quot;+&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeOperation(&quot;-&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeOperation(&quot;*&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                          <test-case name="ushoza.calc.test.TestParser.ShouldBeOperation(&quot;/&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                        </results>
                      </test-suite>
                      <test-case name="ushoza.calc.test.TestParser.ShouldBeTokenListWithNegativeNumbersAndBrackets" executed="True" result="Failure" success="False" time="3.288" asserts="1">
                        <failure>
                          <message><![CDATA[  Expected is <System.Collections.Generic.List`1[ushoza.calc.Token]> with 11 elements, actual is <System.Collections.Generic.List`1[ushoza.calc.Token]> with 13 elements
  Values differ at index [0]
  Expected: <ushoza.calc.TokenOperand>
  But was:  <ushoza.calc.DefaultTokenOperation>
]]></message>
                          <stack-trace><![CDATA[в ushoza.calc.test.TestParser.ShouldBeTokenListWithNegativeNumbersAndBrackets() в D:\WORK\GITHUB\TestTaskCalculator\TestTaskCalc\ushoza.calc\TestProject\TestParser.cs:строка 207
]]></stack-trace>
                        </failure>
                      </test-case>
                      <test-case name="ushoza.calc.test.TestParser.ShouldBeTokenListWithNegativeNumbersSimple" executed="True" result="Failure" success="False" time="2.121" asserts="1">
                        <failure>
                          <message><![CDATA[  Expected is <System.Collections.Generic.List`1[ushoza.calc.Token]> with 5 elements, actual is <System.Collections.Generic.List`1[ushoza.calc.Token]> with 6 elements
  Values differ at index [0]
  Expected: <ushoza.calc.TokenOperand>
  But was:  <ushoza.calc.DefaultTokenOperation>
]]></message>
                          <stack-trace><![CDATA[в ushoza.calc.test.TestParser.ShouldBeTokenListWithNegativeNumbersSimple() в D:\WORK\GITHUB\TestTaskCalculator\TestTaskCalc\ushoza.calc\TestProject\TestParser.cs:строка 187
]]></stack-trace>
                        </failure>
                      </test-case>
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>